#version 450
layout(local_size_x = 16, local_size_y = 16) in;

// Our storage image for output (set=0, binding=0).
layout(rgba32f, set = 0, binding = 0) uniform image2D outImage;

// Push constant block with a 4x4 matrix + a float FOV
layout(push_constant) uniform PC {
    mat4 view;  // camera->world transform
    float fov;  // field-of-view in radians
} pc;

struct RaymarchMaterial {
    vec3 color;
    float roughness;
    float metallic;
};

// A struct to represent raymarching results
struct RaymarchResult {
    vec3 pos;   // hit position
    vec3 normal; // hit normal
    float tHit; // distance to hit point
    bool hit;   // true if hit something
    RaymarchMaterial material;
};

struct SphereSDF {
    vec3 center;
    float radius;
    RaymarchMaterial material;
};

struct CubeSDF {
    mat4 transform;
    RaymarchMaterial material;
};

struct Light {
    vec3 position;
    vec3 color;
    float intensity;
    int lightType; // 0 = point, 1 = directional
    int attenuationType; // 0 = none, 1 = linear, 2 = quadratic
};


// description of our scene
SphereSDF spheres[5] = SphereSDF[](
    SphereSDF(vec3(3, 2, -2), 1.0, RaymarchMaterial(vec3(1, 0, 0), 1.1, 0.2)), 
    SphereSDF(vec3(1, -5, -10), 2.0, RaymarchMaterial(vec3(0, 1, 0), 0.1, 0.0)), 
    SphereSDF(vec3(2.5, 0, -8), 3.0, RaymarchMaterial(vec3(0, 0, 1), 25.5, 1.0)),
    SphereSDF(vec3(-1, -3, -15), 2.0, RaymarchMaterial(vec3(0, 1, 1), 0.8, 0.5)),
    SphereSDF(vec3(-5, 2, -10), 1.5, RaymarchMaterial(vec3(1, 0, 1), 0.1, 0.0)));

const int NUM_SPHERES = 5;


// Light description
Light lights[3] = Light[](
    Light(vec3(-0.5, 0.5,-10), vec3(0.91, 0.77, 0.48), 3.5, 0, 1), // point light
    Light(vec3(0, 0,10), vec3(0.1, 0.88, 0.51), 2.5, 0, 1), // point light
    Light(vec3(1, 1, -1), vec3(0.59, 0.27, 0.72), 0.25, 1, 0) // directional light
);
const int NUM_LIGHTS = 3;

// Hard-coded resolution to match your window:
const vec2 iResolution = vec2(800.0, 600.0);

// Raymarch parameters
const float EPSILON = 0.001;
const float MAX_DISTANCE = 100.0;
const int MAX_STEPS = 64;

// A naive raymarch for a single sphere at the origin
RaymarchResult raymarchSphere(SphereSDF sphere, vec3 ro, vec3 rd) {
    float t = 0.0;
    RaymarchResult res;
    res.hit = false;
    for(int i = 0; i < MAX_STEPS; i++) {
        vec3 pos = ro + rd * t;
        float dist = length(pos - sphere.center) - sphere.radius;
        if(dist < EPSILON) {
            res.hit = true;
            res.pos = pos;
            res.normal = normalize(pos - sphere.center);
            res.tHit = t;
            res.material = sphere.material;
            break;
        }
        t += dist;
        if(t > MAX_DISTANCE) {
            break;
        }
    }

    return res;
}

RaymarchResult raymarchCube(CubeSDF cube, vec3 ro, vec3 rd) {
    float t = 0.0;
    RaymarchResult res;
    res.hit = false;
    for(int i = 0; i < MAX_STEPS; i++) {
        vec3 pos = ro + rd * t;
        vec3 posLocal = (inverse(cube.transform) * vec4(pos, 1)).xyz;
        float dist = length(max(abs(posLocal) - vec3(1.0), 0.0)) - 0.5;
        if(dist < EPSILON) {
            res.hit = true;
            res.pos = pos;
            res.normal = normalize(pos - cube.transform[3].xyz);
            res.tHit = t;
            res.material = cube.material;
            break;
        }
        t += dist;
        if(t > MAX_DISTANCE) {
            break;
        }
    }

    return res;
}

vec4 calculateLightColor(RaymarchResult res, Light light, vec3 lightDir, vec3 viewDir) {
    // blinn-phong shading
    vec3 halfDir = normalize(lightDir + viewDir);
    float NdotL = max(dot(res.normal, lightDir), 0.0);


    vec4 ambient = vec4(0.1, 0.1, 0.1, 1.0);
    vec4 diffuse = vec4(light.color, 1.0) * NdotL;
    vec4 specularColor = pow(max(dot(res.normal, halfDir), 0.0), res.material.roughness) * vec4(1.0, 1.0, 1.0, 1.0) * res.material.metallic * light.intensity;

    // return vec4(1.0, 1.0, 1.0, 1.0);
    return (ambient + diffuse + specularColor) * light.intensity;
}

vec4 calculateDirectionalLightColor(RaymarchResult res, Light light, vec3 viewDir) {
    vec3 lightDir = normalize(-light.position);
    return calculateLightColor(res, light, lightDir, viewDir);
}

float calculateAttenuationFactor(Light light, float distance) {
    float none = 1.0;
    float linear = 1.0 / distance;
    float quadratic = 1.0 / (distance * distance);

    // linear combination of attenuation types, no branching
    return none * float(light.attenuationType == 0) +
        linear * float(light.attenuationType == 1) +
        quadratic * float(light.attenuationType == 2);
}

vec4 calculatePointLightColor(RaymarchResult res, Light light, vec3 viewDir) {
    vec3 lightDir = normalize(light.position - res.pos);
    float distance = length(light.position - res.pos);
    float attenuation = calculateAttenuationFactor(light, distance);
    return calculateLightColor(res, light, lightDir, viewDir) * attenuation;
}

vec4 calculateLightColor(RaymarchResult res, Light light, vec3 viewDir) {
    vec4 pointLight = calculatePointLightColor(res, light, viewDir) * vec4(res.material.color, 1.0);
    vec4 directionalLight = calculateDirectionalLightColor(res, light, viewDir) * vec4(res.material.color, 1.0);

    // linear combination of light types, no branching
    return pointLight * float(light.lightType == 0) +
        directionalLight * float(light.lightType == 1);
}

void main() {
    ivec2 pix = ivec2(gl_GlobalInvocationID.xy);
    if(pix.x >= int(iResolution.x) || pix.y >= int(iResolution.y)) {
        return; // out of bounds
    }

    // Convert pixel coords to [-1..1], adjusting for aspect ratio
    vec2 uv = (vec2(pix) + 0.5) / iResolution * 2.0 - 1.0;
    uv.x *= iResolution.x / iResolution.y;

    // Construct a camera-space ray direction with perspective
    // We'll assume negative Z is forward in camera space
    float halfFov = pc.fov * 0.5;
    vec3 rdCam = normalize(vec3(uv * tan(halfFov), -1.0));

    // Invert the view matrix to transform from camera space to world space
    mat4 invView = inverse(pc.view);

    // Camera origin (0,0,0 in camera space -> world space)
    vec3 ro = (invView * vec4(0, 0, 0, 1)).xyz;
    // Ray direction (rdCam in camera space -> world direction)
    vec3 rd = normalize((invView * vec4(rdCam, 0)).xyz);
    // negate rd.y to flip the image, since the image is upside down
    rd.y = -rd.y;

    // Raymarch the scene
    RaymarchResult res;
    res.hit = false;
    for(int i = 0; i < NUM_SPHERES; i++) {
        RaymarchResult thisRes = raymarchSphere(spheres[i], ro, rd);

        if(thisRes.hit && (!res.hit || thisRes.tHit < res.tHit)) {
            res = thisRes;
        }
    }


    vec4 color;
    if(res.hit) {
        for(int i = 0; i < NUM_LIGHTS; i++) {
            color += calculateLightColor(res, lights[i], rd);
        }
    } else {
        color = vec4(0.11, 0.11, 0.29, 1.0);
    }

    // Write the pixel color to the output image
    imageStore(outImage, pix, color);
}
